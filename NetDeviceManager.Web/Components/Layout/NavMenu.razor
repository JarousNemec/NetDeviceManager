@using NetDeviceManager.Web.Components.Logos
@implements IDisposable
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
<AuthorizeView>
    <Authorized>
        <div class="to-row nav-bar">
            <div class="to-row ">
                <div style="margin-right: 15px">
                    <SmallLogo/>
                </div>
                <div class="nav-link @(_selected == "" ? "active" : "")" onclick="@(() => { SetSelectedLink(""); })">
                    <a href="" Match="NavLinkMatch.All" class="nav-link-item">
                        Home
                    </a>
                </div>

                <div class="nav-link @(_selected == "map" ? "active" : "")" onclick="@(() => { SetSelectedLink("map"); })">
                    <a href="map" class="nav-link-item">
                        Map
                    </a>
                </div>

                <div class="nav-link @(_selected == "snmp" ? "active" : "")" onclick="@(() => { SetSelectedLink("snmp"); })">
                    <a href="snmp" class="nav-link-item">
                        Snmp
                    </a>
                </div>
                <div class="nav-link @(_selected == "syslog" ? "active" : "")" onclick="@(() => { SetSelectedLink("syslog"); })">
                    <a href="syslog" class="nav-link-item">
                        Syslog
                    </a>
                </div>
                <div class="nav-link @(_selected == "devices" ? "active" : "")" onclick="@(() => { SetSelectedLink("devices"); })">
                    <a href="devices" class="nav-link-item">
                        Devices
                    </a>
                </div>
                <div class="nav-link @(_selected == "reports" ? "active" : "")" onclick="@(() => { SetSelectedLink("reports"); })">
                    <a href="reports" class="nav-link-item">
                        Reports
                    </a>
                </div>
                <div class="nav-link-dropdown" onclick="@(() => { SetSelectedLink("mibs"); })">
                    <Dropdown>
                        <DropdownToggleButton Color="ButtonColor.None"><span class="font-18">MIBs</span></DropdownToggleButton>
                        <DropdownMenu>
                            <DropdownItem Target="Target.Blank" To="https://www.circitor.fr/Mibs/Mibs.php" Type="ButtonType.Link"><span class="font-18">Circitor</span></DropdownItem>
                            <DropdownItem Target="Target.Blank" To="https://github.com/hsnodgrass/snmp_mib_archive/tree/master/snmp_mib_archive" Type="ButtonType.Link"><span class="font-18">Github - hsnodgrass</span></DropdownItem>
                            <DropdownItem Target="Target.Blank" To="https://github.com/kcsinclair/mibs" Type="ButtonType.Link"><span class="font-18">Github - kcsinclair</span></DropdownItem>
                            <DropdownItem Target="Target.Blank" To="http://www.snmplink.org/resource/mib/#5" Type="ButtonType.Link"><span class="font-18">SnmpLink</span></DropdownItem>
                            <DropdownItem Target="Target.Blank" To="https://bestmonitoringtools.com/snmp-mib-download-any-mib-from-any-vendor/" Type="ButtonType.Link"><span class="font-18">BestSyslogTools</span></DropdownItem>
                        </DropdownMenu>
                    </Dropdown>
                </div>
                <div class="nav-link @(_selected == "settings" ? "active" : "")" onclick="@(() => { SetSelectedLink("settings"); })">
                    <a href="settings" class="nav-link-item">
                        Settings
                    </a>
                </div>
            </div>
            <div>
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken/>
                    <input type="hidden" name="ReturnUrl" value=""/>
                    <button type="submit" class="logout-btn">
                        Logout
                    </button>
                </form>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private string _selected = string.Empty;

    [Inject] public NavbarHelper NavbarHelper { get; set; }
    
    private void SetSelectedLink(string link)
    {
        _selected = link;
        InvokeAsync(StateHasChanged);
    }
    
    

    private string? currentUrl;

    protected override void OnInitialized()
    {
        NavbarHelper.OnSelectedNavbarChange += SetSelectedLink;
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

}