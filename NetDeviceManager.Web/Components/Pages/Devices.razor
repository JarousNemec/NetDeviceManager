@page "/devices"
@using Microsoft.AspNetCore.Authorization
@using NetDeviceManager.Database.Tables
@using NetDeviceManager.Lib.Snmp.Interfaces

@using NetDeviceManager.Lib.Interfaces
@using NetDeviceManager.Web.Components.Modals
@rendermode InteractiveServer
@attribute [Authorize]
<PageTitle>devices</PageTitle>
<ConfirmDialog @ref="dialog"/>
<ConfigureDeviceModal @ref="configureDeviceModal" Device="ModalDevice" Devices="@DatabaseService.GetDevices()" LoginProfiles="@DatabaseService.GetLoginProfiles()" OnApply="OnApplyConfigureModal" OnNewDevice="OnNewDevice" OnNewProfile="OnNewProfile"/>
<NewDeviceModelModal @ref="newDeviceModelModal" Device="new Device()" Icons="@DatabaseService.GetIcons()" OnApply="OnApplyNewDeviceModal"></NewDeviceModelModal>
<NewLoginProfileModal @ref="_newLoginProfileModal" Profile="new LoginProfile()" OnApply="OnApplyNewLoginProfile"></NewLoginProfileModal>
<div>
    <h2>Devices</h2>
    <div class="actions-div">
        <button class="btn-style-normal btn-action font-16" @onclick="CreateNewDevice">New device</button>
    </div>

    <Grid @ref="grid"
          TItem="PhysicalDevice"
          Class="table table-hover table-bordered table-striped"
          DataProvider="RecordsDataProvider"
          Responsive="true">

        <GridColumn TItem="PhysicalDevice" HeaderText="Name" PropertyName="Device name">
            @($"{context.Name} ({@context.Device.Model})")
        </GridColumn>
        <GridColumn TItem="PhysicalDevice" HeaderText="IpAddress" PropertyName="IpAddress">
            @context.IpAddress
        </GridColumn>
        <GridColumn TItem="PhysicalDevice" HeaderText="Snmp Warnings" PropertyName="Data">
            @SnmpService.GetCurrentDeviceSnmpAlertsCount(context.Id)
        </GridColumn>
        <GridColumn TItem="PhysicalDevice" HeaderText="Syslog warnings" PropertyName="Data">
            @SyslogService.GetCurrentDeviceSyslogAlertsCount(context.Id)
        </GridColumn>
        <GridColumn TItem="PhysicalDevice" HeaderText="Actions" PropertyName="Data">
            <div style="display: flex; width: 100%; flex-direction: row-reverse;">
                <div class="btn-container-grid">
                    <button class="btn-style-danger btn-action font-16" @onclick="() => RemoveDevice(context.Id)">X</button>
                </div>
                <div class="btn-container-grid">
                    <button class="btn-style-normal btn-action font-16" @onclick="() => ConfigureDevice(context)">Configure</button>
                </div>
            </div>

        </GridColumn>
    </Grid>
</div>

<style>
    .actions-div {
        display: flex;
        align-items: flex-end;
        margin-bottom: 8px;
    }
</style>

@code{
    [Inject] public IDeviceService DeviceService { get; set; }
    [Inject] public ISnmpService SnmpService { get; set; }
    [Inject] public ISyslogService SyslogService { get; set; }
    [Inject] public IDatabaseService DatabaseService { get; set; }
    [Inject] public NavigationManager NavigationManager { get; set; }

    BlazorBootstrap.Grid<PhysicalDevice> grid = default!;
    private IEnumerable<PhysicalDevice> _records = default!;
    private ConfirmDialog dialog = default!;
    private ConfigureDeviceModal configureDeviceModal = default!;
    private NewDeviceModelModal newDeviceModelModal = default!;
    private NewLoginProfileModal _newLoginProfileModal = default!;

    private PhysicalDevice ModalDevice = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task<GridDataProviderResult<PhysicalDevice>> RecordsDataProvider(GridDataProviderRequest<PhysicalDevice> request)
    {
        if (_records is null) // pull employees only one time for client-side filtering, sorting, and paging
            _records = GetRecords(); // call a service or an API to pull the employees
        return await Task.FromResult(request.ApplyTo(_records));
    }

    private IEnumerable<PhysicalDevice> GetRecords()
    {
        return DatabaseService.GetPhysicalDevices();
    }

    private async void CreateNewDevice()
    {
        ModalDevice = new PhysicalDevice();
        await configureDeviceModal.ShowModalAsync();
    }

    private async void RemoveDevice(Guid id)
    {
        if (await ShowConfirmationAsync())
            DatabaseService.DeletePhysicalDevice(id);
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    private async void ConfigureDevice(PhysicalDevice device)
    {
        ModalDevice = device;
        await configureDeviceModal.ShowModalAsync();
    }


    private async Task<bool> ShowConfirmationAsync()
    {
        var options = new ConfirmDialogOptions
        {
            YesButtonText = "Yes",
            YesButtonColor = ButtonColor.Success,
            NoButtonText = "No",
            NoButtonColor = ButtonColor.Danger
        };

        var confirmation = await dialog.ShowAsync(
            title: "Confirm dialog",
            message1: "Are u sure u wanna to do it?",
            confirmDialogOptions: options);

        return confirmation;
    }

    private async void OnApplyConfigureModal(PhysicalDevice obj)
    {
        DeviceService.AddPhysicalDevice(obj);
        await configureDeviceModal.HideModalAsync();
    }

    private async void OnNewDevice()
    {
        await newDeviceModelModal.ShowModalAsync();
    }

    private async void OnNewProfile()
    {
        await _newLoginProfileModal.ShowModalAsync();
    }

    private async void OnApplyNewDeviceModal(Device obj)
    {
        var id = DatabaseService.AddDevice(obj);
        obj.Id = id;
        configureDeviceModal.AddNewDevice(obj);
        await newDeviceModelModal.HideModalAsync();
    }

    private async void OnApplyNewLoginProfile(LoginProfile obj)
    {
        var id = DatabaseService.AddLoginProfile(obj);
        obj.Id = id;
        configureDeviceModal.AddNewProfile(obj);
        await _newLoginProfileModal.HideModalAsync();
    }

}