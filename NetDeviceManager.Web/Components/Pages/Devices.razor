@page "/devices"
@using Microsoft.AspNetCore.Authorization
@using NetDeviceManager.Database.Tables

@using NetDeviceManager.Lib.Interfaces
@using NetDeviceManager.Lib.Model
@using NetDeviceManager.Web.Components.Modals
@rendermode InteractiveServer
@attribute [Authorize]
<PageTitle>devices</PageTitle>
<ConfirmDialog @ref="_confirmDialog"/>
<ConfigureDeviceModal @ref="_configureDeviceModal" Devices="DevicesList" LoginProfiles="ProfilesList" OnApply="OnApplyConfigureModal" OnNewDevice="OnNewDevice" OnNewProfile="OnNewProfile" SpecialDevicePorts="DevicesPorts" OnNewPort="OnNewPort" OnRemovePort="OnRemovePort"/>
<NewDeviceModelModal @ref="_newDeviceModelModal" Device="new Device()" Icons="IconsList" OnApply="OnApplyNewDeviceModal" OnNewIcon="OnNewIcon"></NewDeviceModelModal>
<NewLoginProfileModal @ref="_newLoginProfileModal" Profile="new LoginProfile()" OnApply="OnApplyNewLoginProfile"></NewLoginProfileModal>
<NewIconModal @ref="_newIconModal" Icon="new CreateDeviceIconModel()" OnApply="OnApplyNewDeviceIcon"></NewIconModal>
<AddPortModal @ref="_addPortModal" Port="new Port()" OnApply="OnApplyNewPort" PortsInSystem="PortsInSystem"></AddPortModal>
<div>
    <h2>Devices</h2>
    <div class="actions-div">
        <button class="btn-style-normal btn-action font-16" @onclick="CreateNewDevice">New device</button>
    </div>

    <Grid @ref="_grid"
          TItem="PhysicalDevice"
          Class="table table-hover table-bordered table-striped"
          DataProvider="RecordsDataProvider"
          Responsive="true">

        <GridColumn TItem="PhysicalDevice" HeaderText="Name" PropertyName="Device name">
            @($"{context.Name} ({@context.Device.Model})")
        </GridColumn>
        <GridColumn TItem="PhysicalDevice" HeaderText="IpAddress" PropertyName="IpAddress">
            @context.IpAddress
        </GridColumn>
        <GridColumn TItem="PhysicalDevice" HeaderText="Snmp Warnings" PropertyName="Data">
            @SnmpService.GetDeviceSnmpAlertsCount(context.Id)
        </GridColumn>
        <GridColumn TItem="PhysicalDevice" HeaderText="Syslog warnings" PropertyName="Data">
            @SyslogService.GetCurrentDeviceSyslogAlertsCount(context.Id)
        </GridColumn>
        <GridColumn TItem="PhysicalDevice" HeaderText="Actions" PropertyName="Data">
            <div style="display: flex; width: 100%; flex-direction: row-reverse;">
                <div class="btn-container-grid">
                    <button class="btn-style-danger btn-action font-16" @onclick="() => RemoveDevice(context.Id)">X</button>
                </div>
                <div class="btn-container-grid">
                    <button class="btn-style-normal btn-action font-16" @onclick="() => ConfigureDevice(context)">Configure</button>
                </div>
            </div>

        </GridColumn>
    </Grid>
</div>

@code{
    [Inject] public IDeviceService DeviceService { get; set; }
    [Inject] public ISnmpService SnmpService { get; set; }
    [Inject] public ISyslogService SyslogService { get; set; }
    [Inject] public IDatabaseService DatabaseService { get; set; }
    [Inject] public NavigationManager NavigationManager { get; set; }

    private Grid<PhysicalDevice> _grid = default!;
    private IEnumerable<PhysicalDevice> _records = default!;
    private ConfirmDialog _confirmDialog = default!;
    private ConfigureDeviceModal _configureDeviceModal = default!;
    private NewDeviceModelModal _newDeviceModelModal = default!;
    private NewLoginProfileModal _newLoginProfileModal = default!;
    private NewIconModal _newIconModal = default!;
    private AddPortModal _addPortModal = default!;

    private List<Device> DevicesList = default!;
    private List<PhysicalDeviceHasPort> DevicesPorts = default!;
    private List<LoginProfile> ProfilesList = default!;
    private List<DeviceIcon> IconsList = default!;
    private List<Port> PortsInSystem = default!;

    private PhysicalDevice _tempPhDevice = default!;
    private Device _tempDevice = default!;
    private List<Port> _tempDevicePorts = default!;


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            UpdateCurrentData();
            InvokeAsync(StateHasChanged);
        }
    }

    private void UpdateCurrentData()
    {
        DevicesList = DatabaseService.GetDevices();
        ProfilesList = DatabaseService.GetLoginProfiles();
        IconsList = DatabaseService.GetIcons();
        PortsInSystem = DatabaseService.GetPortsInSystem();
        DevicesPorts = new List<PhysicalDeviceHasPort>();
        _tempDevicePorts = new List<Port>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task<GridDataProviderResult<PhysicalDevice>> RecordsDataProvider(GridDataProviderRequest<PhysicalDevice> request)
    {
        _records = GetRecords();
        return await Task.FromResult(request.ApplyTo(_records));
    }

    private IEnumerable<PhysicalDevice> GetRecords()
    {
        return DatabaseService.GetPhysicalDevices();
    }

    private async void CreateNewDevice()
    {
        _configureDeviceModal.Device = new PhysicalDevice();
        await _configureDeviceModal.ShowModalAsync();
    }

    private async void RemoveDevice(Guid id)
    {
        if (await ShowConfirmationAsync())
            DatabaseService.DeletePhysicalDevice(id);
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    private async void ConfigureDevice(PhysicalDevice device)
    {
        _configureDeviceModal.Device = device;
        DevicesPorts = DatabaseService.GetPortInPhysicalDevices(device.Id);
        _configureDeviceModal.SpecialDevicePorts = new List<PhysicalDeviceHasPort>();
        foreach (var port in DevicesPorts)
        {
            _configureDeviceModal.AddNewPort(port);
        }
        await _configureDeviceModal.ShowModalAsync();
    }

    private async void OnApplyConfigureModal(PhysicalDevice obj)
    {
        var result = DeviceService.UpsertPhysicalDevice(obj, out Guid deviceId);
        foreach (var tempDevicePort in _tempDevicePorts)
        {
            result = DeviceService.AddPortToDevice(tempDevicePort, deviceId);
        }

        await _configureDeviceModal.HideModalAsync();
        UpdateCurrentData();
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    private async void OnNewDevice(PhysicalDevice obj)
    {
        _tempPhDevice = obj;
        await _configureDeviceModal.HideModalAsync();
        await _newDeviceModelModal.ShowModalAsync();
    }

    private async void OnNewProfile(PhysicalDevice obj)
    {
        _tempPhDevice = obj;
        await _configureDeviceModal.HideModalAsync();
        await _newLoginProfileModal.ShowModalAsync();
    }

    private async void OnNewPort(PhysicalDevice obj)
    {
        _tempPhDevice = obj;
        await _configureDeviceModal.HideModalAsync();
        await _addPortModal.ShowModalAsync();
    }

    private async void OnNewIcon(Device obj)
    {
        _tempDevice = obj;
        await _newDeviceModelModal.HideModalAsync();
        await _newIconModal.ShowModalAsync();
    }

    private void OnRemovePort(PhysicalDeviceHasPort relation)
    {
        var tempPort = _tempDevicePorts.FirstOrDefault(x => x.Number == relation.Port.Number && x.Protocol == relation.Port.Protocol);
        if (tempPort != null)
            _tempDevicePorts.Remove(tempPort);
        else
            DatabaseService.RemovePortFromDevice(relation.Id);
    }


    private async void OnApplyNewDeviceModal(Device obj)
    {
        var id = DatabaseService.AddDevice(obj);
        obj.Id = id;
        _configureDeviceModal.AddNewDevice(obj);
        await _newDeviceModelModal.HideModalAsync();
        _configureDeviceModal.Device = _tempPhDevice;
        await _configureDeviceModal.ShowModalAsync();
    }

    private async void OnApplyNewLoginProfile(LoginProfile obj)
    {
        var id = DatabaseService.AddLoginProfile(obj);
        obj.Id = id;
        _configureDeviceModal.AddNewProfile(obj);
        await _newLoginProfileModal.HideModalAsync();
        _configureDeviceModal.Device = _tempPhDevice;
        await _configureDeviceModal.ShowModalAsync();
    }

    private async void OnApplyNewDeviceIcon(CreateDeviceIconModel obj)
    {
        var icon = await DeviceService.AddDeviceIcon(obj);
        _newDeviceModelModal.AddNewIcon(icon);
        await _newIconModal.HideModalAsync();
        _newDeviceModelModal.Device = _tempDevice;
        await _newDeviceModelModal.ShowModalAsync();
    }

    private async void OnApplyNewPort(Port obj)
    {
        _tempDevicePorts.Add(obj);
        _configureDeviceModal.AddNewPort(new PhysicalDeviceHasPort() { Port = obj });
        await _addPortModal.HideModalAsync();
        _configureDeviceModal.Device = _tempPhDevice;
        await _configureDeviceModal.ShowModalAsync();
    }


    private async Task<bool> ShowConfirmationAsync()
    {
        var options = new ConfirmDialogOptions
        {
            YesButtonText = "Yes",
            YesButtonColor = ButtonColor.Success,
            NoButtonText = "No",
            NoButtonColor = ButtonColor.Danger
        };

        var confirmation = await _confirmDialog.ShowAsync(
            title: "Confirm dialog",
            message1: "Are u sure u wanna to do it?",
            confirmDialogOptions: options);

        return confirmation;
    }

}