@page "/devices"
@using Microsoft.AspNetCore.Authorization
@using NetDeviceManager.Database.Tables

@using NetDeviceManager.Lib.Interfaces
@using NetDeviceManager.Lib.Services
@using NetDeviceManager.Web.Components.Modals
@rendermode InteractiveServer
@attribute [Authorize]
<PageTitle>Devices</PageTitle>
<ConfirmDialog @ref="_confirmDialog"/>
<ConfigureDeviceModal @ref="_configureDeviceModal" OnApply="OnApplyConfigureModal"/>
<div>
    <h2>Devices</h2>
    <div class="actions-div">
        <button class="btn-style-normal btn-action font-16" @onclick="CreateNewDevice">New device</button>
    </div>

    <Grid @ref="_grid"
          TItem="PhysicalDevice"
          Class="table table-hover table-bordered table-striped"
          DataProvider="RecordsDataProvider"
          Responsive="true">

        <GridColumn TItem="PhysicalDevice" HeaderText="Name" PropertyName="Device name">
            @context.Name
        </GridColumn>
        <GridColumn TItem="PhysicalDevice" HeaderText="IpAddress" PropertyName="IpAddress">
            @String.Join(", ", context.IpAddresses)
        </GridColumn>
        <GridColumn TItem="PhysicalDevice" HeaderText="Snmp Warnings" PropertyName="Data">
            @SnmpService.GetDeviceSnmpAlertsCount(context.Id)
        </GridColumn>
        <GridColumn TItem="PhysicalDevice" HeaderText="Syslog warnings" PropertyName="Data">
            @SyslogService.GetCurrentDeviceSyslogAlertsCount(context.Id)
        </GridColumn>
        <GridColumn TItem="PhysicalDevice" HeaderText="Actions" PropertyName="Data">
            <div style="display: flex; width: 100%; flex-direction: row-reverse;">
                <div class="btn-container-grid">
                    <button class="btn-style-danger btn-action font-16" @onclick="() => RemoveDevice(context.Id)">X
                    </button>
                </div>
                <div class="btn-container-grid">
                    <button class="btn-style-normal btn-action font-16" @onclick="() => ConfigureDevice(context)">
                        Configure
                    </button>
                </div>
            </div>

        </GridColumn>
    </Grid>
</div>

@code{
    [Inject] IDeviceService DeviceService { get; set; } = null!;
    [Inject] ISnmpService SnmpService { get; set; } = null!;
    [Inject] ISyslogService SyslogService { get; set; } = null!;
    [Inject] IDatabaseService DatabaseService { get; set; } = null!;
    [Inject] NavigationManager NavigationManager { get; set; } = null!;
    [Inject] IPortService PortService { get; set; } = null!;
    [Inject] ILoginProfileService LoginProfileService { get; set; } = null!;
    [Inject] IIpAddressesService IpAddressService { get; set; } = null!;

    private Grid<PhysicalDevice> _grid = null!;
    private IEnumerable<PhysicalDevice> _records = null!;
    private ConfirmDialog _confirmDialog = null!;

    private ConfigureDeviceModal _configureDeviceModal = null!;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task<GridDataProviderResult<PhysicalDevice>> RecordsDataProvider(GridDataProviderRequest<PhysicalDevice> request)
    {
        _records = GetRecords();
        return await Task.FromResult(request.ApplyTo(_records));
    }

    private IEnumerable<PhysicalDevice> GetRecords()
    {
        return DatabaseService.GetPhysicalDevicesWithIpAddresses();
    }

    private async void CreateNewDevice()
    {
        _configureDeviceModal.Device = new PhysicalDevice();
        _configureDeviceModal.LoginProfilesToDevice = new List<LoginProfile>();
        _configureDeviceModal.LoginProfiles = LoginProfileService.GetLoginProfiles();
        _configureDeviceModal.IpAddresses = new List<String>();
        _configureDeviceModal.DevicePorts = new List<Port>();
        _configureDeviceModal.Ports = DatabaseService.GetPortsInSystem();
        await _configureDeviceModal.ShowModalAsync();
    }

    private async void RemoveDevice(Guid id)
    {
        if (await ShowConfirmationAsync())
            DatabaseService.DeletePhysicalDevice(id);
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    private async void ConfigureDevice(PhysicalDevice device)
    {
        _configureDeviceModal.Device = device;
        _configureDeviceModal.LoginProfilesToDevice = LoginProfileService.GetPhysicalDeviceLoginProfiles(device.Id);
        _configureDeviceModal.LoginProfiles = LoginProfileService.GetLoginProfiles();
        _configureDeviceModal.IpAddresses = DatabaseService.GetPhysicalDeviceIpAddresses(device.Id);
        _configureDeviceModal.DevicePorts = DatabaseService.GetPortsInPhysicalDevice(device.Id);
        _configureDeviceModal.Ports = DatabaseService.GetPortsInSystem();
        await _configureDeviceModal.ShowModalAsync();
    }

    private async void OnApplyConfigureModal(PhysicalDevice device, List<Port> ports, List<LoginProfile> profiles, List<String> ipAddresses)
    {
        var deviceResult = DeviceService.UpsertPhysicalDevice(device, out Guid deviceId);
        var portsResult = PortService.UpdatePortsAndDeviceRelations(ports, deviceId);
        var profilesResult = LoginProfileService.UpdateLoginProfilesAndDeviceRelations(profiles, deviceId);
        var ipAddressesResult = IpAddressService.UpdateIpAddressesAndDeviceRelations(ipAddresses, deviceId);
        await _configureDeviceModal.HideModalAsync();
        await _grid.RefreshDataAsync();
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    private async Task<bool> ShowConfirmationAsync()
    {
        var options = new ConfirmDialogOptions
        {
            YesButtonText = "Yes",
            YesButtonColor = ButtonColor.Success,
            NoButtonText = "No",
            NoButtonColor = ButtonColor.Danger
        };

        var confirmation = await _confirmDialog.ShowAsync(
            title: "Confirm dialog",
            message1: "Are u sure u wanna do it?",
            confirmDialogOptions: options);

        return confirmation;
    }

}