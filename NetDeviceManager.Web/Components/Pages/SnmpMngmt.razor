@page "/snmpmngmt"
@using Microsoft.AspNetCore.Authorization
@using NetDeviceManager.Database.Models
@using NetDeviceManager.Database.Tables

@using NetDeviceManager.Lib.Interfaces
@using NetDeviceManager.Lib.Model
@using NetDeviceManager.Web.Components.Modals
@using NetDeviceManager.Web.Components.CustomeComponents
@attribute [Authorize]
@rendermode InteractiveServer


<ConfirmDialog @ref="_confirmDialog"/>
<ConfigureSensorModal @ref="_configureSensorModal" OnApply="OnApplyConfigureSensor"/>
<AssignSensorModal @ref="_assignSensorModal" Devices="Devices" Pattern="new CorrectDataPattern()" Sensors="Sensors" OnApply="OnApplySensorAssignment"></AssignSensorModal>
<PageTitle>Snmp mngmt</PageTitle>
<div>
    <div>
        <h2>Snmp sensors</h2>
        <div class="actions-div">
            <button class="btn-style-normal btn-action font-16" @onclick="CreateNewSensor">New sensor</button>
        </div>
        <Grid @ref="_gridSensors"
              TItem="SnmpSensor"
              Class="table table-hover table-bordered table-striped"
              Data="Sensors"
              Responsive="true"
              EmptyText="No sensors in system">

            <GridColumn TItem="SnmpSensor" HeaderText="Name" PropertyName="Name">
                @context.Name
            </GridColumn>
            <GridColumn TItem="SnmpSensor" HeaderText="Oid" PropertyName="Oid">
                @context.Oid
            </GridColumn>
            <GridColumn TItem="SnmpSensor" HeaderText="Usages" PropertyName="Warnings">
                @SnmpService.GetSensorUsagesCount(context.Id)
            </GridColumn>
            <GridColumn TItem="SnmpSensor" HeaderText="Warnings" PropertyName="Data">
                @SnmpService.GetSensorSnmpAlertsCount(context.Id)
            </GridColumn>
            <GridColumn TItem="SnmpSensor" HeaderText="Actions" PropertyName="Data">
                <div style="display: flex; width: 100%; flex-direction: row-reverse;">
                    <div class="btn-container-grid">
                        <button class="btn-style-danger btn-action font-16" @onclick="() => DeleteSensor(context.Id)">X</button>
                    </div>
                    <div class="btn-container-grid">
                        <button class="btn-style-normal btn-action font-16" @onclick="() => ConfigureSensor(context)">Configure</button>
                    </div>
                </div>

            </GridColumn>
        </Grid>
    </div>
    <div>
        <h2>Assigned sensors</h2>
        <div class="actions-div">
            <button class="btn-style-normal btn-action font-16" @onclick="AssignSensor">Assign sensor</button>
        </div>
        @foreach (var device in Devices)
        {
            @if (SnmpService.IsAnySensorInDevice(device.Id))
            {
                <DeviceSensorAssignmentsComponent Device="device" Rows="DeviceService.GetSensorsOfPhysicalDevice(device.Id)" ConfigureSensorOfDevice="OnConfigureSensorOfDevice" RemoveSensorFromDevice="OnRemoveSensorFromDevice"/>
            }
        }

    </div>
    <div>
        <h2>Alerts</h2>
        <Grid @ref="_gridAlert"
              TItem="SnmpAlertModel"
              Class="table table-hover table-bordered table-striped"
              DataProvider="AlertsDataProvider"
              Responsive="true"
              EmptyText="No alerts registered">

            <GridColumn TItem="SnmpAlertModel" HeaderText="Device" PropertyName="DeviceName">
                @($"{context.Device.Name}")
            </GridColumn>
            <GridColumn TItem="SnmpAlertModel" HeaderText="Sensor" PropertyName="SensorName">
                @($"{context.Sensor.Name} ({@context.Sensor.Oid})")
            </GridColumn>
            <GridColumn TItem="SnmpAlertModel" HeaderText="Expected data" PropertyName="Expected">
                @context.Expected
            </GridColumn>
            <GridColumn TItem="SnmpAlertModel" HeaderText="Current data" PropertyName="Current">
                @context.Current
            </GridColumn>
            <GridColumn TItem="SnmpAlertModel" HeaderText="Actions" PropertyName="Data">
                <div style="display: flex; width: 100%; flex-direction: row-reverse;">
                    <div class="btn-container-grid">
                        <button class="btn-style-danger btn-action font-16" @onclick="() => RemoveAlert(context.Id)">X</button>
                    </div>
                </div>
            </GridColumn>
        </Grid>
    </div>
</div>

@code{
    private AssignSensorModal _assignSensorModal = default!;

    [Inject]  IDeviceService DeviceService { get; set; }
    [Inject]  ISnmpService SnmpService { get; set; }
    [Inject]  IDatabaseService DatabaseService { get; set; }
    [Inject]  NavigationManager NavigationManager { get; set; }

    Grid<SnmpAlertModel> _gridAlert = default!;
    Grid<SnmpSensor> _gridSensors = default!;
    private IEnumerable<SnmpSensor> _sensors = default!;
    private IEnumerable<SnmpSensorInPhysicalDevice> _assignments = default!;
    private IEnumerable<SnmpAlertModel> _alerts = default!;

    private ConfigureSensorModal _configureSensorModal = default!;
    private ConfirmDialog _confirmDialog = default!;

    private List<PhysicalDevice> Devices = new List<PhysicalDevice>();
    private List<SnmpSensor> Sensors = new List<SnmpSensor>();
    private CorrectDataPattern Pattern = new CorrectDataPattern();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            UpdateCurrentData();
            InvokeAsync(StateHasChanged);
        }
    }

    private void UpdateCurrentData()
    {
        Devices = DeviceService.GetAllPhysicalDevices();
        Sensors = SnmpService.GetAllSensors();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task<GridDataProviderResult<SnmpAlertModel>> AlertsDataProvider(GridDataProviderRequest<SnmpAlertModel> request)
    {
        _alerts = GetAlerts();
        return await Task.FromResult(request.ApplyTo(_alerts));
    }

    private IEnumerable<SnmpAlertModel> GetAlerts()
    {
        return SnmpService.GetAlerts();
    }

    private async void CreateNewSensor()
    {
        _configureSensorModal.Sensor = new SnmpSensor();
        await _configureSensorModal.ShowModalAsync();
    }

    private async void AssignSensor()
    {
        _assignSensorModal.Pattern = new CorrectDataPattern();
        await _assignSensorModal.ShowModalAsync();
    }

    private async void DeleteSensor(Guid sensorId)
    {
        if (await ShowConfirmationAsync())
            SnmpService.DeleteSnmpSensor(sensorId);
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    private async Task<bool> ShowConfirmationAsync()
    {
        var options = new ConfirmDialogOptions
        {
            YesButtonText = "Yes",
            YesButtonColor = ButtonColor.Success,
            NoButtonText = "No",
            NoButtonColor = ButtonColor.Danger
        };

        var confirmation = await _confirmDialog.ShowAsync(
            title: "Confirm dialog",
            message1: "Are u sure u wanna to do it?",
            confirmDialogOptions: options);

        return confirmation;
    }

    private async void ConfigureSensor(SnmpSensor sensor)
    {
        _configureSensorModal.Sensor = sensor;
        await _configureSensorModal.ShowModalAsync();
    }

    private async void OnApplyConfigureSensor(SnmpSensor obj)
    {
        SnmpService.UpsertSnmpSensor(obj, out var id);
        await _configureSensorModal.HideModalAsync();
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    private void RemoveAlert(Guid id)
    {
        SnmpService.RemoveAlert(id);
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    private async void OnConfigureSensorOfDevice(SnmpSensorInPhysicalDevice obj)
    {
        var pattern = DatabaseService.GetSpecificPattern(obj.PhysicalDeviceId, obj.SnmpSensorId);
        if(pattern == null)
            return;
        _assignSensorModal.Pattern = pattern;
        await _assignSensorModal.ShowModalAsync();
    }

    private void OnRemoveSensorFromDevice(SnmpSensorInPhysicalDevice relationship)
    {
        SnmpService.RemoveSensorFromDevice(relationship);
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    private async void OnApplySensorAssignment(CorrectDataPattern obj)
    {
        SnmpService.AssignSensorToDevice(obj);
        await _assignSensorModal.HideModalAsync();
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

}