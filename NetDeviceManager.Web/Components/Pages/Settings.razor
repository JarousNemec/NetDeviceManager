@page "/settings"
@using System.Diagnostics
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Connections
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using NetDeviceManager.Database.Identity

@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@using NetDeviceManager.Database.Tables
@using NetDeviceManager.Lib.Interfaces
@using NetDeviceManager.Lib.Model
@using NetDeviceManager.Lib.Services
@using NetDeviceManager.Web.Components.Account
@using NetDeviceManager.Web.Models
@using NetDeviceManager.Web.Components.Modals
@rendermode InteractiveServer
@attribute [Authorize]

<ConfirmDialog @ref="_confirmDialog"/>
<PortModal @ref="_portModal" OnApply="OnApplyNewPort"></PortModal>
<UserModal @ref="_userModal" OnApply="OnApplyUser"></UserModal>
<LoginProfileModal @ref="_loginProfileModal" OnApply="OnApplyLoginProfileModal"></LoginProfileModal>
<Toasts class="p-3" Messages="_messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight"/>
<PageTitle>settings</PageTitle>
<div style="margin: 30px; margin-top: 0">

    <div style="width: 50%; margin: 10px 0">
        <EditForm EditContext="new EditContext(SettingsModel)" method="post" OnValidSubmit="SubmitForm" FormName="Settings" class="modal-form">
            <div class="labelinput-menu">
                <label class="label-menu font-16">Logs report interval (CRON format)</label>
                <InputText @bind-Value="SettingsModel.ReportLogInterval" class="input-modalform font-16"
                           placeholder="Enter interval..."/>
                <div class="btn-container-modalform">
                    <a href="https://www.freeformatter.com/cron-expression-generator-quartz.html" target="_blank" class="btn-action btn-style-normal font-16">Open CRON generator</a>
                </div>
            </div>
            <div class="labelinput-menu">
                <label class="label-menu font-16">Snmp sensors read interval (CRON format)</label>
                <InputText @bind-Value="SettingsModel.ReportSensorInterval" class="input-modalform font-16"
                           placeholder="Enter interval..."/>
                <div class="btn-container-modalform">
                    <a href="https://www.freeformatter.com/cron-expression-generator-quartz.html" target="_blank" class="btn-action btn-style-normal font-16">Open CRON generator</a>
                </div>
            </div>
        </EditForm>
    </div>
    <div class="labelinput-menu">
        <label class="label-menu font-16">Users</label>
        <Grid @ref="_gridUsers"
              TItem="ApplicationUser"
              Class="table table-hover table-bordered table-striped"
              DataProvider="UsersDataProvider"
              Responsive="true">
            <GridColumn TItem="ApplicationUser" HeaderText="Name" PropertyName="Number">
                @context.UserName
            </GridColumn>
            <GridColumn TItem="ApplicationUser" HeaderText="ApiKey" PropertyName="Protocol">
                @context.ApiKey
            </GridColumn>
            <GridColumn TItem="ApplicationUser" HeaderText="Actions" PropertyName="Data">
                <div style="display: flex; width: 100%; flex-direction: row-reverse;">
                    <div class="btn-container-grid">
                        <button class="btn-style-danger btn-action font-16" @onclick="() => OnRemoveUser(context)">X</button>
                    </div>
                    <div class="btn-container-grid">
                        <button class="btn-style-normal btn-action font-16" @onclick="() => OnEditUser(context)">Edit</button>
                    </div>
                </div>
            </GridColumn>
        </Grid>
        <div class="btn-container-modalform">
            <button class="btn-action btn-style-normal font-16" @onclick="OnAddUser">
                Add user
            </button>
        </div>
    </div>

    <div class="labelinput-menu">
        <label class="label-menu font-16">Login profiles</label>
        <Grid @ref="_gridLoginProfiles"
              TItem="LoginProfile"
              Class="table table-hover table-bordered table-striped"
              DataProvider="LoginProfilesDataProvider"
              Responsive="true">
            <GridColumn TItem="LoginProfile" HeaderText="Name" PropertyName="Number">
                @context.Name
            </GridColumn>
            <GridColumn TItem="LoginProfile" HeaderText="Actions" PropertyName="Data">
                <div style="display: flex; width: 100%; flex-direction: row-reverse;">
                    <div class="btn-container-grid">
                        <button class="btn-style-danger btn-action font-16" @onclick="() => OnRemoveLoginProfile(context)">X</button>
                    </div>
                    <div class="btn-container-grid">
                        <button class="btn-style-normal btn-action font-16" @onclick="() => OnEditLoginProfile(context)">Edit</button>
                    </div>
                </div>
            </GridColumn>
        </Grid>
        <div class="btn-container-modalform">
            <button class="btn-action btn-style-normal font-16" @onclick="OnAddLoginProfile">
                Add login profile
            </button>
        </div>
    </div>

    <div class="labelinput-menu">
        <label class="label-menu font-16">Ports</label>
        <Grid @ref="_gridPorts"
              TItem="Port"
              Class="table table-hover table-bordered table-striped"
              DataProvider="PortsDataProvider"
              Responsive="true">

            <GridColumn TItem="Port" HeaderText="Number" PropertyName="Number">
                @context.Number
            </GridColumn>
            <GridColumn TItem="Port" HeaderText="Protocol" PropertyName="Protocol">
                @context.Protocol.ToString()
            </GridColumn>
            <GridColumn TItem="Port" HeaderText="Actions" PropertyName="Data">

                <div style="display: flex; width: 100%; flex-direction: row-reverse;">
                    <div class="btn-container-grid">
                        <button class="btn-style-danger btn-action font-16" @onclick="() => OnRemovePort(context)">X</button>
                    </div>
                </div>
            </GridColumn>
        </Grid>
        <div class="btn-container-modalform">
            <button class="btn-action btn-style-normal font-16" @onclick="OnAddPort">
                Add port
            </button>
        </div>
    </div>

    <div>
        <button type="submit" @onclick="SubmitForm" class="btn-apply btn-style-confirm font-16">Apply changes</button>
    </div>
</div>




@code{
    [Inject] IDeviceService DeviceService { get; set; }
    [Inject] ISnmpService SnmpService { get; set; }
    [Inject] IDatabaseService DatabaseService { get; set; }
    [Inject] ILoginProfileService LoginProfileService { get; set; }
    [Inject] IPortService PortService { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] UserManager<ApplicationUser> UserManager { get; set; }
    [Inject] IUserStore<ApplicationUser> UserStore { get; set; }
    [Inject] SignInManager<ApplicationUser> SignInManager { get; set; }
    [Inject] IdentityRedirectManager RedirectManager { get; set; }
    [Inject] SettingsService SettingsService { get; set; }

    public SettingsUpdateModel SettingsModel { get; set; } = new ();
    private ConfirmDialog _confirmDialog = null!;
    
    private Grid<Port> _gridPorts = null!;
    private Grid<ApplicationUser> _gridUsers = null!;
    private Grid<LoginProfile> _gridLoginProfiles = null!;

    private PortModal _portModal = null!;
    private UserModal _userModal = null!;
    private LoginProfileModal _loginProfileModal = null!;

    private List<ToastMessage> _messages = [];

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            SettingsModel = SettingsService.GetSettingsUpdateModel();
            InvokeAsync(StateHasChanged);
        }
    }
    
    private async Task<GridDataProviderResult<Port>> PortsDataProvider(GridDataProviderRequest<Port> request)
    {
        var ports = PortService.GetPortsInSystem();
        return await Task.FromResult(request.ApplyTo(ports));
    }
    
    private async Task<GridDataProviderResult<ApplicationUser>> UsersDataProvider(GridDataProviderRequest<ApplicationUser> request)
    {
        var users = UserManager.Users.ToList();
        return await Task.FromResult(request.ApplyTo(users));
    }

    private async Task<GridDataProviderResult<LoginProfile>> LoginProfilesDataProvider(GridDataProviderRequest<LoginProfile> request)
    {
        var profiles = LoginProfileService.GetAllLoginProfiles();
        return await Task.FromResult(request.ApplyTo(profiles));
    }

    public async Task OperateUser(UserCreateModel input)
    {
        var user = UserManager.Users.FirstOrDefault(x => x.UserName == input.Username);
        if (user == null)
        {
            await RegisterUser(input);
        }
        else
        {
            await ChangePassword(user, input.Password);
        }
    }

    public async Task ChangePassword(ApplicationUser user, string newpassword)
    {
        if(newpassword == string.Empty)
            return;
        var token = await UserManager.GeneratePasswordResetTokenAsync(user);
        var resetPasswordResult = await UserManager.ResetPasswordAsync(user, token, newpassword);
        if (!resetPasswordResult.Succeeded)
        {
            Debug.WriteLine(resetPasswordResult);
            return;
        }
    }
    
    public async Task RegisterUser(UserCreateModel input)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, input.Username, CancellationToken.None);
        user.ApiKey = Guid.NewGuid().ToString();
        var result = await UserManager.CreateAsync(user, input.Password);
        if (result.Succeeded)
        {
            ShowToast(ToastType.Success, "User successfully added");
        }
        else
        {
            ShowToast(ToastType.Danger, result.Errors.ToList()[0].Description);
        }

        await InvokeAsync(StateHasChanged);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                                                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private void ShowToast(ToastType toastType, string message) => _messages.Add(CreateToastMessage(toastType, message));

    private ToastMessage CreateToastMessage(ToastType toastType, string message)
        => new ToastMessage
        {
            Type = toastType,
            Title = toastType.ToString(),
            HelpText = $"{DateTime.Now}",
            Message = message,
        };

    private void SubmitForm()
    {
        SettingsService.UpdateSettings(SettingsModel);
    }

    private async Task OnAddUser()
    {
        _userModal.User = new UserCreateModel();
        _userModal.UserReadonly = false;
        await _userModal.ShowModalAsync();
    }
    
    private async Task OnAddPort()
    {
        await _portModal.ShowModalAsync();
    }

    private async Task OnRemoveUser(ApplicationUser user)
    {
        if (await ShowConfirmationAsync())
            DatabaseService.DeleteUser(user.Id);
        await _gridUsers.RefreshDataAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async void OnApplyNewPort(Port port)
    {
        await _portModal.HideModalAsync();
        PortService.UpsertPort(port);
        await _gridPorts.RefreshDataAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async void OnApplyUser(UserCreateModel user)
    {
        await _userModal.HideModalAsync();
        await OperateUser(user);
        await _gridUsers.RefreshDataAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async void OnApplyLoginProfileModal(LoginProfile profile)
    {
        await _loginProfileModal.HideModalAsync();
        LoginProfileService.UpsertLoginProfile(profile);
        await _gridLoginProfiles.RefreshDataAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnRemovePort(Port context)
    {
        if (await ShowConfirmationAsync())
            PortService.RemovePort(context.Id);
        await _gridPorts.RefreshDataAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task<bool> ShowConfirmationAsync()
    {
        var options = new ConfirmDialogOptions
        {
            YesButtonText = "Yes",
            YesButtonColor = ButtonColor.Success,
            NoButtonText = "No",
            NoButtonColor = ButtonColor.Danger
        };

        var confirmation = await _confirmDialog.ShowAsync(
            title: "Confirm dialog",
            message1: "Are u sure u wanna to do it?",
            confirmDialogOptions: options);

        return confirmation;
    }

    private async Task OnEditLoginProfile(LoginProfile context)
    {
        _loginProfileModal.Profile = context;
        await _loginProfileModal.ShowModalAsync();
    }

    private async Task OnRemoveLoginProfile(LoginProfile context)
    {
        await _loginProfileModal.HideModalAsync();
        LoginProfileService.RemoveLoginProfile(context.Id);
        await _gridLoginProfiles.RefreshDataAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async void OnAddLoginProfile()
    {
        var profile = new LoginProfile();
        profile.Id = Guid.Empty;
        _loginProfileModal.Profile = profile;
        await _loginProfileModal.ShowModalAsync();
    }

    private async Task OnEditUser(ApplicationUser context)
    {
        var model = new UserCreateModel();
        model.Password = string.Empty;
        if (context.UserName != null) model.Username = context.UserName;
        _userModal.User = model;
        _userModal.UserReadonly = true;
        await _userModal.ShowModalAsync();
    }

}