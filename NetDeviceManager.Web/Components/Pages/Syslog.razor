@page "/syslog"
@using Microsoft.AspNetCore.Authorization
@using NetDeviceManager.Database.Models
@using NetDeviceManager.Database.Tables

@using NetDeviceManager.Lib.Interfaces
@rendermode  InteractiveServer
@attribute [Authorize]
<PageTitle>Syslog</PageTitle>
<div>
    <h2>Syslog records</h2>

    <EditForm Model="Filter" method="post" OnValidSubmit="FilterRecords" FormName="filter" class="filter-form">
        <div class="labelinput-menu">
            <label class="label-menu font-16">Device name</label>
            <InputText @bind-Value="Filter.DeviceName" class="input-menu font-16" placeholder="Enter your device name..."/>
        </div>
        <div class="labelinput-menu">
            <label class="label-menu font-16">Ip address</label>
            <InputText @bind-Value="Filter.IpAddress" class="input-menu font-16" placeholder="Enter your ip address..."/>
        </div>
        <div class="labelinput-menu">
            <label class="label-menu font-16">Facility</label>
            <InputNumber @bind-Value="Filter.Facility" class="input-menu font-16" placeholder="Enter facility..."/>
        </div>
        <div class="labelinput-menu">
            <label class="label-menu font-16">Severity</label>
            <InputNumber @bind-Value="Filter.Severity" class="input-menu font-16" placeholder="Enter severity..."/>
        </div>
        <button type="submit" class="btn-action btn-style-normal font-16">Query data</button>
    </EditForm>

    <Grid @ref="grid"
          TItem="SyslogRecord"
          Class="table table-hover table-bordered table-striped"
          DataProvider="RecordsDataProvider"
          Responsive="true">

        <GridColumn TItem="SyslogRecord" HeaderText="Processed time" PropertyName="ProcessedDate">
            @context.ProcessedDate
        </GridColumn>
        <GridColumn TItem="SyslogRecord" HeaderText="Device" PropertyName="PhysicalDevice.Name">
            @($"{(context.PhysicalDevice == null ? context.PhysicalDevice?.Name : string.Empty)} ({@context.Ip})")
        </GridColumn>
        <GridColumn TItem="SyslogRecord" HeaderText="Message" PropertyName="CompletMessage">
            @context.CompletMessage
        </GridColumn>
    </Grid>
</div>

<style>
    .filter-form {
        display: flex;
        align-items: flex-end;
        margin-bottom: 8px;
    }
</style>

@code{
    [Inject]  IDeviceService DeviceService { get; set; }
    [Inject]  ISnmpService SnmpService { get; set; }
    [Inject]  IDatabaseService DatabaseService { get; set; }

    [SupplyParameterFromForm] private SyslogRecordFilterModel Filter { get; set; } = new();

    BlazorBootstrap.Grid<SyslogRecord> grid = default!;
    private IEnumerable<SyslogRecord> _records = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task<GridDataProviderResult<SyslogRecord>> RecordsDataProvider(GridDataProviderRequest<SyslogRecord> request)
    {
        if (_records is null) // pull employees only one time for client-side filtering, sorting, and paging
            _records = GetRecords(); // call a service or an API to pull the employees
        return await Task.FromResult(request.ApplyTo(_records));
    }

    private IEnumerable<SyslogRecord> GetRecords()
    {
        return DatabaseService.GetLastSyslogRecords(100);
    }

    private async void FilterRecords()
    {
        _records = DatabaseService.GetSyslogRecordsWithFilter(Filter, 100);
        await grid.RefreshDataAsync();
    }

}