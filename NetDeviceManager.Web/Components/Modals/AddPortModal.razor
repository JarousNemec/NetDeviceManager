@using NetDeviceManager.Database.Tables
@using NetDeviceManager.Lib.GlobalConstantsAndEnums
@using NetDeviceManager.Lib.Model
@using NetDeviceManager.Lib.Utils
@rendermode InteractiveServer
<Modal @ref="modal" Title="Add Port">
    <BodyTemplate>
        <div style="margin: 30px; margin-top: 0">
            <EditForm Model="_port" method="post" OnValidSubmit="SubmitForm" FormName="NewPort" class="modal-form">
                <DataAnnotationsValidator />
                <div class="labelinput-modalform">
                    <label class="label-menu font-16">Number<span class="important-symbol">*</span></label>
                    <InputNumber @bind-Value="_port.Number" class="input-modalform font-16" placeholder="Enter name..."/>
                    <ValidationMessage For="() => _port.Number"/>
                </div>
                <div class="labelinput-modalform">
                    <label class="label-menu font-16">Protocol<span class="important-symbol">*</span></label>
                    <InputSelect TValue="CommunicationProtocol" Value="_port.Protocol" ValueExpression="() => _port.Protocol" ValueChanged="(value) => ProtocolSelected(value)" class="input-modalform">
                        @foreach (var protocol in EnumUtil.GetValues<CommunicationProtocol>())
                        {
                            <option value="@protocol">@protocol.ToString()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => _port.Protocol"/>
                </div>
                <div>
                    <button type="submit" class="btn-apply btn-style-confirm font-16">Add</button>
                </div>
            </EditForm>
        </div>
    </BodyTemplate>
</Modal>

@code{
    private Modal modal = default!;

    private Port _port = new Port();
    [Parameter] public Action<Port> OnApply { get; set; }

    public async Task ShowModalAsync()
    {
        await modal.ShowAsync();
    }

    public async Task HideModalAsync()
    {
        await modal.HideAsync();
    }

    private void SubmitForm()
    {
        OnApply?.Invoke(_port);
    }

    private void ProtocolSelected(CommunicationProtocol obj)
    {
        _port.Protocol = obj;
    }
}