@using System.Net
@using NetDeviceManager.Database.Tables
@rendermode InteractiveServer
<Modal @ref="modal" Title="Device configuration">
    <BodyTemplate>
        <div style="margin: 30px; margin-top: 0">
            <EditForm id="deviceconfigform" Model="Device" method="post" OnValidSubmit="SubmitForm" FormName="Config"
                      class="modal-form">
                <DataAnnotationsValidator/>
                <div class="labelinput-modalform">
                    <label class="label-menu font-16">Name<span class="important-symbol">*</span></label>
                    <InputText @bind-Value="Device.Name" class="input-modalform font-16"
                               placeholder="Enter your device name..."/>
                    <ValidationMessage For="() => Device.Name"/>
                </div>
                <div class="labelinput-modalform">
                    <label class="label-menu font-16">Description</label>
                    <InputText @bind-Value="Device.Description" class="input-modalform font-16"
                               placeholder="Enter description..."/>
                </div>
                <div class="labelinput-modalform">
                    <label class="label-menu font-16">Mac Address</label>
                    <InputText @bind-Value="Device.MacAddress" class="input-modalform font-16"
                               placeholder="Enter device mac address..."/>
                </div>
                <div class="labelinput-modalform">
                    <label class="label-menu font-16">Platform</label>
                    <InputText @bind-Value="Device.Platform" class="input-modalform font-16"
                               placeholder="Enter device platform..."/>
                </div>
                <div class="labelinput-modalform">
                    <label class="label-menu font-16">Version</label>
                    <InputText @bind-Value="Device.Version" class="input-modalform font-16"
                               placeholder="Enter device os version..."/>
                </div>
                <div class="labelinput-modalform">
                    <label class="label-menu font-16">Capabilities</label>
                    <InputText @bind-Value="Device.Capabilities" class="input-modalform font-16"
                               placeholder="Enter device capabilities..."/>
                </div>
            </EditForm>
            <div class="labelinput-modalform">
                <label class="label-menu font-16">Ip addresses:</label>
                <Grid @ref="_gridAddresses"
                      TItem="String"
                      Class="table table-hover table-bordered table-striped"
                      DataProvider="AddressesDataProvider"
                      Responsive="true">

                    <GridColumn TItem="String" HeaderText="IpAddress" PropertyName="IpAddress">
                        @context
                    </GridColumn>
                    <GridColumn TItem="String" HeaderText="Actions" PropertyName="Data">
                        <div style="display: flex; width: 100%; flex-direction: row-reverse;">
                            <div class="btn-container-grid">
                                <button class="btn-style-danger btn-action font-16"
                                        @onclick="() => OnRemoveIpAddress(context)">X
                                </button>
                            </div>
                        </div>
                    </GridColumn>
                </Grid>
                <div class="labelinput-modalform">
                    <label class="label-menu font-16">New Ip Address</label>
                    <InputText @bind-Value="_currentIpAddress" class="input-modalform font-16"
                               placeholder="Enter device ip address..."/>
                    <div class="btn-container-modalform">
                        <button class="btn-action btn-style-normal font-16"
                                @onclick="() => OnAddIpAddress(_currentIpAddress)">
                            Add Ip Address
                        </button>
                    </div>
                </div>
            </div>
            <div class="labelinput-modalform">
                <label class="label-menu font-16">LoginProfiles:</label>
                <Grid @ref="_gridProfiles"
                      TItem="LoginProfile"
                      Class="table table-hover table-bordered table-striped"
                      DataProvider="ProfilesDataProvider"
                      Responsive="true">

                    <GridColumn TItem="LoginProfile" HeaderText="Name" PropertyName="Name">
                        @context.Name
                    </GridColumn>
                    <GridColumn TItem="LoginProfile" HeaderText="Description" PropertyName="Description">
                        @context.Description
                    </GridColumn>
                    <GridColumn TItem="LoginProfile" HeaderText="Actions" PropertyName="Data">
                        <div style="display: flex; width: 100%; flex-direction: row-reverse;">
                            <div class="btn-container-grid">
                                <button class="btn-style-danger btn-action font-16"
                                        @onclick="() => OnRemoveProfile(context)">X
                                </button>
                            </div>
                        </div>
                    </GridColumn>
                </Grid>
                <div class="labelinput-modalform">
                    <label class="label-menu font-16">Select login profile:</label>
                    <InputSelect id="profile" @bind-Value="_currentProfile" class="input-modalform">
                        @foreach (var profile in LoginProfiles)
                        {
                            <option value="@profile.Id">@profile.Name</option>
                        }
                    </InputSelect>
                    <div class="btn-container-modalform">
                        <button class="btn-action btn-style-normal font-16"
                                @onclick="() => OnAddProfile(_currentProfile)">
                            Assign login profile
                        </button>
                    </div>
                </div>
            </div>
            <div class="labelinput-modalform">
                <label class="label-menu font-16">Special ports:</label>
                <Grid @ref="_gridPorts"
                      TItem="Port"
                      Class="table table-hover table-bordered table-striped"
                      DataProvider="SpecialPortsDataProvider"
                      Responsive="true">

                    <GridColumn TItem="Port" HeaderText="Number" PropertyName="Number">
                        @context.Number
                    </GridColumn>
                    <GridColumn TItem="Port" HeaderText="Protocol" PropertyName="Protocol">
                        @context.Protocol.ToString()
                    </GridColumn>
                    <GridColumn TItem="Port" HeaderText="Actions" PropertyName="Data">
                        <div style="display: flex; width: 100%; flex-direction: row-reverse;">
                            <div class="btn-container-grid">
                                <button class="btn-style-danger btn-action font-16"
                                        @onclick="() => OnRemovePort(context)">X
                                </button>
                            </div>
                        </div>
                    </GridColumn>
                </Grid>
                <div class="labelinput-modalform">
                    <label class="label-menu font-16">Select port:</label>
                    <InputSelect id="port" @bind-Value="_currentPort" class="input-modalform">
                        @foreach (var port in Ports)
                        {
                            <option value="@port.Id">@port.Number (@port.Protocol.ToString())</option>
                        }
                    </InputSelect>
                    <div class="btn-container-modalform">
                        <button class="btn-action btn-style-normal font-16" @onclick="() => OnAddPort(_currentPort)">
                            Add port
                        </button>
                    </div>
                </div>
            </div>
            <div>
                <button type="submit" form="deviceconfigform" class="btn-apply btn-style-confirm font-16">Apply</button>
            </div>
        </div>
    </BodyTemplate>
</Modal>

@code{
    public PhysicalDevice Device { get; set; }
    public List<Port> DevicePorts { get; set; }
    public List<Port> Ports { get; set; }
    public List<LoginProfile> LoginProfiles { get; set; }
    public List<LoginProfile> LoginProfilesToDevice { get; set; }
    public List<String> IpAddresses { get; set; }

    private Modal modal = null!;

    private Grid<Port> _gridPorts = null!;
    private Grid<LoginProfile> _gridProfiles = null!;
    private Grid<String> _gridAddresses = null!;

    private Guid _currentProfile = Guid.Empty!;
    private Guid _currentPort = Guid.Empty!;
    private String _currentIpAddress = null!;

    [Parameter] public Action<PhysicalDevice, List<Port>, List<LoginProfile>, List<String>> OnApply { get; set; }

    private async Task<GridDataProviderResult<Port>> SpecialPortsDataProvider(GridDataProviderRequest<Port> request)
    {
        return await Task.FromResult(request.ApplyTo(DevicePorts));
    }

    private async Task<GridDataProviderResult<LoginProfile>> ProfilesDataProvider(GridDataProviderRequest<LoginProfile> request)
    {
        return await Task.FromResult(request.ApplyTo(LoginProfilesToDevice));
    }

    private async Task<GridDataProviderResult<String>> AddressesDataProvider(GridDataProviderRequest<String> request)
    {
        return await Task.FromResult(request.ApplyTo(IpAddresses));
    }

    private void SubmitForm()
    {
        OnApply?.Invoke(Device, DevicePorts, LoginProfilesToDevice, IpAddresses);
    }

    public async Task ShowModalAsync()
    {
        await modal.ShowAsync();
        await InvokeAsync(StateHasChanged);
    }

    public async Task HideModalAsync()
    {
        await modal.HideAsync();
    }

    private async Task OnRemoveIpAddress(string ipAddress)
    {
        if (IpAddresses.Contains(ipAddress))
            IpAddresses.Remove(ipAddress);
        await _gridAddresses.RefreshDataAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnAddIpAddress(string ipAddress)
    {
        if (IPAddress.TryParse(ipAddress.Trim(), out var address))
            if (!IpAddresses.Contains(address.ToString()))
                IpAddresses.Add(address.ToString());
        await _gridAddresses.RefreshDataAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnRemoveProfile(LoginProfile profile)
    {
        if (LoginProfilesToDevice.Contains(profile))
            LoginProfilesToDevice.Remove(profile);
        await _gridProfiles.RefreshDataAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnAddProfile(Guid id)
    {
        var profile = LoginProfiles.FirstOrDefault(x => x.Id == id);
        if(profile == null)
            return;
        if (!LoginProfilesToDevice.Contains(profile))
            LoginProfilesToDevice.Add(profile);
        await _gridProfiles.RefreshDataAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnRemovePort(Port port)
    {
        if (DevicePorts.Contains(port))
            DevicePorts.Remove(port);
        await _gridPorts.RefreshDataAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnAddPort(Guid id)
    {
        var port = Ports.FirstOrDefault(x => x.Id == id);
        if(port == null)
            return;
        if (!DevicePorts.Contains(port))
            DevicePorts.Add(port);
        await _gridPorts.RefreshDataAsync();
        await InvokeAsync(StateHasChanged);
    }

}