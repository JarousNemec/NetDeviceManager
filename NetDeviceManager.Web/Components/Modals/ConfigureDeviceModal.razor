@using NetDeviceManager.Database.Tables
@rendermode InteractiveServer
<Modal @ref="modal" Title="Device configuration">
    <BodyTemplate>
        <div style="margin: 30px; margin-top: 0">
            <EditForm Model="Device" method="post" OnValidSubmit="SubmitForm" FormName="Config" class="modal-form">
                <DataAnnotationsValidator />
                <div class="labelinput-modalform">
                    <label class="label-menu font-16">Name<span class="important-symbol">*</span></label>
                    <InputText @bind-Value="Device.Name" class="input-modalform font-16"
                               placeholder="Enter your device name..."/>
                    <ValidationMessage For="() => Device.Name"/>
                </div>
                <div class="labelinput-modalform">
                    <label class="label-menu font-16">Description</label>
                    <InputText @bind-Value="Device.Description" class="input-modalform font-16"
                               placeholder="Enter description..."/>
                </div>
                <div class="labelinput-modalform">
                    <label class="label-menu font-16">Ip Address<span class="important-symbol">*</span></label>
                    <InputText @bind-Value="Device.IpAddress" class="input-modalform font-16"
                               placeholder="Enter device ip address..."/>
                    <ValidationMessage For="() => Device.IpAddress"/>
                </div>
                <div class="labelinput-modalform">
                    <label class="label-menu font-16">Mac Address</label>
                    <InputText @bind-Value="Device.MacAddress" class="input-modalform font-16"
                               placeholder="Enter device mac address..."/>
                </div>
                <div class="labelinput-modalform">
                    <label class="label-menu font-16">Select device type<span class="important-symbol">*</span>:</label>
                    <InputSelect id="device" @bind-Value="Device.DeviceId" class="input-modalform">
                        @foreach (var device in Devices)
                        {
                            <option value="@device.Id">@($"{device.Name}({device.Model})")</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Device.DeviceId"/>
                    <div class="btn-container-modalform">
                        <button class="btn-action btn-style-normal font-16" @onclick="() => OnNewDevice?.Invoke(Device)">
                            New device
                        </button>
                    </div>
                </div>
                <div class="labelinput-modalform">
                    <label class="label-menu font-16">Select login profile<span class="important-symbol">*</span>:</label>
                    <InputSelect id="profile" @bind-Value="Device.LoginProfileId" class="input-modalform">
                        @foreach (var profile in LoginProfiles)
                        {
                            <option value="@profile.Id">@profile.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Device.LoginProfileId"/>
                    <div class="btn-container-modalform">
                        <button class="btn-action btn-style-normal font-16" @onclick="() => OnNewProfile?.Invoke(Device)">
                            New
                            profile
                        </button>
                    </div>
                </div>
            </EditForm>
            <div class="labelinput-modalform">
                <label class="label-menu font-16">Special ports:</label>
                <Grid @ref="_grid"
                      TItem="PhysicalDeviceHasPort"
                      Class="table table-hover table-bordered table-striped"
                      DataProvider="RecordsDataProvider"
                      Responsive="true">

                    <GridColumn TItem="PhysicalDeviceHasPort" HeaderText="Number" PropertyName="Number">
                        @context.Port.Number
                    </GridColumn>
                    <GridColumn TItem="PhysicalDeviceHasPort" HeaderText="Protocol" PropertyName="Protocol">
                        @context.Port.Protocol.ToString()
                    </GridColumn>
                    <GridColumn TItem="PhysicalDeviceHasPort" HeaderText="Actions" PropertyName="Data">
                        <div style="display: flex; width: 100%; flex-direction: row-reverse;">
                            <div class="btn-container-grid">
                                <button class="btn-style-danger btn-action font-16" @onclick="() => RemoveSpecialPort(context)">X</button>
                            </div>
                        </div>
                    </GridColumn>
                </Grid>
                <div class="btn-container-modalform">
                    <button class="btn-action btn-style-normal font-16" @onclick="() => OnNewPort?.Invoke(Device)">
                        Add port
                    </button>
                </div>
            </div>
            <div>
                <button type="submit" @onclick="SubmitForm" class="btn-apply btn-style-confirm font-16">Apply</button>
            </div>
        </div>
    </BodyTemplate>
</Modal>

@code{
    private Modal modal = default!;
    private Grid<PhysicalDeviceHasPort> _grid = default!;
    public PhysicalDevice Device { get; set; }
    [Parameter] public List<Device> Devices { get; set; }
    [Parameter] public List<LoginProfile> LoginProfiles { get; set; }
    [Parameter] public Action<PhysicalDevice> OnApply { get; set; }
    [Parameter] public Action<PhysicalDevice> OnNewDevice { get; set; }
    [Parameter] public Action<PhysicalDevice> OnNewProfile { get; set; }
    [Parameter] public Action<PhysicalDevice> OnNewPort { get; set; }
    [Parameter] public List<PhysicalDeviceHasPort> SpecialDevicePorts { get; set; }
    [Parameter] public Action<PhysicalDeviceHasPort> OnRemovePort { get; set; }

    private async Task<GridDataProviderResult<PhysicalDeviceHasPort>> RecordsDataProvider(GridDataProviderRequest<PhysicalDeviceHasPort> request)
    {
        return await Task.FromResult(request.ApplyTo(SpecialDevicePorts));
    }

    private async void RemoveSpecialPort(PhysicalDeviceHasPort port)
    {
        OnRemovePort?.Invoke(port);
        SpecialDevicePorts.Remove(port);
        await _grid.RefreshDataAsync();
        await InvokeAsync(StateHasChanged);
    }

    public void AddNewDevice(Device device)
    {
        Devices.Add(device);
        StateHasChanged();
    }

    public void AddNewProfile(LoginProfile profile)
    {
        LoginProfiles.Add(profile);
        StateHasChanged();
    }

    public async void AddNewPort(PhysicalDeviceHasPort port)
    {
        SpecialDevicePorts.Add(port);
        await InvokeAsync(StateHasChanged);
    }

    public async Task ShowModalAsync()
    {
        await modal.ShowAsync();
        await InvokeAsync(StateHasChanged);
    }

    public async Task HideModalAsync()
    {
        await modal.HideAsync();
    }

    private void SubmitForm()
    {
        OnApply?.Invoke(Device);
    }

}